import { Injectable, Component, Input, NgModule, defineInjectable } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ProductListService {
    constructor() { }
}
ProductListService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] },
];
/** @nocollapse */
ProductListService.ctorParameters = () => [];
/** @nocollapse */ ProductListService.ngInjectableDef = defineInjectable({ factory: function ProductListService_Factory() { return new ProductListService(); }, token: ProductListService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ProductListComponent {
    constructor() {
        this.name = 'test';
        this.items = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
ProductListComponent.decorators = [
    { type: Component, args: [{
                selector: 'ram-product-list',
                template: `<p>{{name}} List</p>
<table class="table table-hover">
    <thead>
        <tr>
            <th class="col-size-sm">#</th>
            <th class="col-size-lg">Code</th>
            <th class="col-size-lg">Name</th>
            <th>About</th>
            <th>Price ($)</th>
            <th>Raiting</th>
        </tr>
    </thead>
    <tbody>
        <ng-container *ngIf="items.length; else loading">
            <tr *ngFor="let item of items; let i = index">
                <td class="col-size-sm">{{i+1}}/{{items.length}}</td>
                <td class="col-size-lg">{{item.productCode}}</td>
                <td class="col-size-lg">{{item.productName}}</td>
                <td>{{item.description}}</td>
                <td style="text-align: center">{{item.value | number : '1.0-2' }}</td>
                <td style="text-align: center">{{item.starRating}}</td>
            </tr>
        </ng-container>
    </tbody>
</table>
<ng-template #loading>No Data.</ng-template>`,
                styles: []
            },] },
];
/** @nocollapse */
ProductListComponent.ctorParameters = () => [];
ProductListComponent.propDecorators = {
    "name": [{ type: Input },],
    "items": [{ type: Input },],
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class ProductListModule {
}
ProductListModule.decorators = [
    { type: NgModule, args: [{
                imports: [BrowserModule],
                declarations: [ProductListComponent],
                exports: [ProductListComponent]
            },] },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { ProductListService, ProductListComponent, ProductListModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFtLXByb2R1Y3QtbGlzdC5qcy5tYXAiLCJzb3VyY2VzIjpbIm5nOi8vcmFtLXByb2R1Y3QtbGlzdC9saWIvcHJvZHVjdC1saXN0LnNlcnZpY2UudHMiLCJuZzovL3JhbS1wcm9kdWN0LWxpc3QvbGliL3Byb2R1Y3QtbGlzdC5jb21wb25lbnQudHMiLCJuZzovL3JhbS1wcm9kdWN0LWxpc3QvbGliL3Byb2R1Y3QtbGlzdC5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBQcm9kdWN0TGlzdFNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAncmFtLXByb2R1Y3QtbGlzdCcsXG4gIHRlbXBsYXRlOiBgPHA+e3tuYW1lfX0gTGlzdDwvcD5cbjx0YWJsZSBjbGFzcz1cInRhYmxlIHRhYmxlLWhvdmVyXCI+XG4gICAgPHRoZWFkPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGggY2xhc3M9XCJjb2wtc2l6ZS1zbVwiPiM8L3RoPlxuICAgICAgICAgICAgPHRoIGNsYXNzPVwiY29sLXNpemUtbGdcIj5Db2RlPC90aD5cbiAgICAgICAgICAgIDx0aCBjbGFzcz1cImNvbC1zaXplLWxnXCI+TmFtZTwvdGg+XG4gICAgICAgICAgICA8dGg+QWJvdXQ8L3RoPlxuICAgICAgICAgICAgPHRoPlByaWNlICgkKTwvdGg+XG4gICAgICAgICAgICA8dGg+UmFpdGluZzwvdGg+XG4gICAgICAgIDwvdHI+XG4gICAgPC90aGVhZD5cbiAgICA8dGJvZHk+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJpdGVtcy5sZW5ndGg7IGVsc2UgbG9hZGluZ1wiPlxuICAgICAgICAgICAgPHRyICpuZ0Zvcj1cImxldCBpdGVtIG9mIGl0ZW1zOyBsZXQgaSA9IGluZGV4XCI+XG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiY29sLXNpemUtc21cIj57e2krMX19L3t7aXRlbXMubGVuZ3RofX08L3RkPlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cImNvbC1zaXplLWxnXCI+e3tpdGVtLnByb2R1Y3RDb2RlfX08L3RkPlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cImNvbC1zaXplLWxnXCI+e3tpdGVtLnByb2R1Y3ROYW1lfX08L3RkPlxuICAgICAgICAgICAgICAgIDx0ZD57e2l0ZW0uZGVzY3JpcHRpb259fTwvdGQ+XG4gICAgICAgICAgICAgICAgPHRkIHN0eWxlPVwidGV4dC1hbGlnbjogY2VudGVyXCI+e3tpdGVtLnZhbHVlIHwgbnVtYmVyIDogJzEuMC0yJyB9fTwvdGQ+XG4gICAgICAgICAgICAgICAgPHRkIHN0eWxlPVwidGV4dC1hbGlnbjogY2VudGVyXCI+e3tpdGVtLnN0YXJSYXRpbmd9fTwvdGQ+XG4gICAgICAgICAgICA8L3RyPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8L3Rib2R5PlxuPC90YWJsZT5cbjxuZy10ZW1wbGF0ZSAjbG9hZGluZz5ObyBEYXRhLjwvbmctdGVtcGxhdGU+YCxcbiAgc3R5bGVzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBQcm9kdWN0TGlzdENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgQElucHV0KCkgbmFtZSA9ICd0ZXN0JztcbiAgQElucHV0KCkgaXRlbXMgPSBbXTtcbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG59XG4iLCJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnJvd3Nlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5pbXBvcnQgeyBQcm9kdWN0TGlzdENvbXBvbmVudCB9IGZyb20gJy4vcHJvZHVjdC1saXN0LmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtCcm93c2VyTW9kdWxlXSxcbiAgZGVjbGFyYXRpb25zOiBbUHJvZHVjdExpc3RDb21wb25lbnRdLFxuICBleHBvcnRzOiBbUHJvZHVjdExpc3RDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIFByb2R1Y3RMaXN0TW9kdWxlIHsgfVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtJQU9FLGlCQUFpQjs7O1lBTGxCLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs7Ozs7OztBQ0pEO0lBb0NFO29CQUZnQixNQUFNO3FCQUNMLEVBQUU7S0FDRjs7OztJQUVqQixRQUFRO0tBQ1A7OztZQXJDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjtnQkFDNUIsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZDQXlCaUM7Z0JBQzNDLE1BQU0sRUFBRSxFQUFFO2FBQ1g7Ozs7O3FCQUdFLEtBQUs7c0JBQ0wsS0FBSzs7Ozs7OztBQ25DUjs7O1lBS0MsUUFBUSxTQUFDO2dCQUNSLE9BQU8sRUFBRSxDQUFDLGFBQWEsQ0FBQztnQkFDeEIsWUFBWSxFQUFFLENBQUMsb0JBQW9CLENBQUM7Z0JBQ3BDLE9BQU8sRUFBRSxDQUFDLG9CQUFvQixDQUFDO2FBQ2hDOzs7Ozs7Ozs7Ozs7Ozs7In0=